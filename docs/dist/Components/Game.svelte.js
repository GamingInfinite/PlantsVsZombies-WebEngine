import './Game.svelte.css.proxy.js';
/* src/Components/Game.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponent,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal
} from "../../snowpack/pkg/svelte/internal.js";

import { Plants } from "../plants.js";

function create_fragment(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<canvas id="game" width="1920" height="1080" class="svelte-1se9q77"></canvas>`;
			attr(div, "id", "gameWrapper");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

var FPS = 60;

function update() {
	
}

function instance($$self, $$props, $$invalidate) {
	let { boardType } = $$props;
	let { allowPick = true } = $$props;
	let { maxPlants = 6 } = $$props;
	let { setPicks = [Plants.PEASHOOTER] } = $$props;
	var boardInUse;

	let boards = [
		{
			name: "frontLawn",
			lanes: [{ type: "grass", number: 5 }],
			colors: [0, 1, 0, 1, 0]
		},
		{
			name: "tutorial1",
			lanes: [
				{ type: "dirt", number: 2 },
				{ type: "grass", number: 1 },
				{ type: "dirt", number: 2 }
			],
			colors: [0, 0, 0, 0, 0]
		}
	];

	let types = [
		{
			name: "grass",
			colors: ["#154f1a", "#33b83e"]
		},
		{ name: "dirt", colors: ["#836539"] }
	];

	var lanes = [];

	function getBoardJson(boardKey) {
		for (let i = 0; i < boards.length; i++) {
			const element = boards[i];

			if (element.name == boardKey) {
				boardInUse = element;
			}
		}
	}

	function parseLanes() {
		for (let i = 0; i < boardInUse.lanes.length; i++) {
			const element = boardInUse.lanes[i];

			for (let j = 0; j < element.number; j++) {
				lanes.push(element.type);
			}
		}
	}

	function getLaneJson(laneKey) {
		for (let i = 0; i < types.length; i++) {
			const element = types[i];

			if (element.name == laneKey) {
				return element;
			}
		}
	}

	function drawBoard(ctx, height, width) {
		for (let i = 0; i < lanes.length; i++) {
			const element = lanes[i];

			if (getLaneJson(element).colors.length > 1) {
				for (let j = 0; j < 9; j++) {
					let altColor;

					if (boardInUse.colors[i] == 0) {
						altColor = 1;
					} else {
						altColor = 0;
					}

					if (j % 2 == 0) {
						ctx.fillStyle = getLaneJson(element).colors[boardInUse.colors[i]];
					} else {
						ctx.fillStyle = getLaneJson(element).colors[altColor];
					}

					ctx.fillRect(width * 0.1 + j * (width * 0.09445), i * ((height - height * 0.3) / 5) + height * 0.2, width * 0.09445, (height - height * 0.3) / 5 + 1);
				}
			} else {
				ctx.fillStyle = getLaneJson(element).colors[boardInUse.colors[i]];
				ctx.fillRect(width * 0.1, i * ((height - height * 0.3) / 5) + height * 0.2, width * 0.85, (height - height * 0.3) / 5 + 1);
			}
		}
	}

	getBoardJson(boardType);
	parseLanes();
	getLaneJson("grass");

	function draw() {
		var canvas = document.getElementById("game");
		var ctx = canvas.getContext("2d");
		let height = window.innerHeight;
		let width = window.innerWidth;
		canvas.height = height;
		canvas.width = width;
		drawBoard(ctx, height, width);
	}

	setInterval(
		() => {
			update();
			draw();
		},
		1000 / FPS
	);

	$$self.$$set = $$props => {
		if ('boardType' in $$props) $$invalidate(0, boardType = $$props.boardType);
		if ('allowPick' in $$props) $$invalidate(1, allowPick = $$props.allowPick);
		if ('maxPlants' in $$props) $$invalidate(2, maxPlants = $$props.maxPlants);
		if ('setPicks' in $$props) $$invalidate(3, setPicks = $$props.setPicks);
	};

	return [boardType, allowPick, maxPlants, setPicks];
}

class Game extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			boardType: 0,
			allowPick: 1,
			maxPlants: 2,
			setPicks: 3
		});
	}
}

export default Game;